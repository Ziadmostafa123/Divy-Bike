print(“Hello world!”)
print("Hello world!")
1+2
q()
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
v1>-c(3,4,5,6)
v1<-c(3,4,5,6)
ccharacter<-c(a,b,c,d)
ccharacter<-c("a","b","c")
vcharacter<-c("a","b","c")
c(5L,1L,6L)
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
today()
now()
ymd_hms("2021-01-20 20:11:59")
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
dir.create ("destination_folder")
file.create (“new_text_file.txt”)
file.create ("new_text_file.txt")
file.create ("new_text_file.txt")
file.create("new_text_file.txt")
file.copy("new_text_file.txt","destination_folder")
c(3:8)
nrow=2
matrix(c(3:8),nrow = 2)
matrix(c(3:8), ncol = 2)
install.packages()
installed.packages()
install.packages("tidyverse")
library("tidyverse")
View("ToothGrowth")
View("ToothGrowth")
View(ToothGrowth)
View(ToothGrowth)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
install.packages("tidyverse")
library(ggplot2)
data("diamonds")
view(diamonds)
head(diamonds)
library(tidyverse)
data(diamonds)
View(diamonds)
as_tibble(diamonds)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
bookings_df <- read.csv("hotel_bookings.csv")
setwd("projects/Course 7/Week 3")
install.packages("here")
library(here)
library("here")
install.packages("skimr")
library("skimr")
install.packages("janitor")
library("janitor")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
install.packages("palmerpenguins")
library("palmerpenguins")
skim_without_charts(penguins)
glimpse(penguins)
head(penguins)
source("~/.active-rstudio-document", echo=TRUE)
peguins %>%
select(species)
peguins %>%
select(species)
head(penguins)
penguins %>%
select(species)
penguins %>%
select(species)
penguins %>%
rename(island_new=island)
rename_with(penguins, toupper)
rename_with(penguins, tolower)
clean_names(penguins)
library(tidyverse)
penguins %>%  arrange(bill_length_mm)
penguins %>%  arrange(-bill_length_mm)
penguins2 <- penguins %>% arrange(-bill_length_mm)
view(penguins2)
penguins %>% group_by(island) %>% drop_na() %>% summarize(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island) %>% drop_na() %>% summarize(max_bill_length_mm = max(bill_length_mm))
penguins %>% group_by(species, island) %>% drop_na() %>% summarize(max_bl = max(bill_length_mm , mean_bl = mean(bill_length_mm))
penguins %>% group_by(species, island) %>% drop_na() %>% summarize(max_bl = max(bill_length_mm , mean_bl = mean(bill_length_mm))
penguins %>% group_by(species, island) %>% drop_na() %>% summarize(max_bl = max(bill_length_mm , mean_bl = mean(bill_length_mm))
>
+-
36982147\
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
library(tidyverse)
library(skimr)
library(janitor)
bookings_df <- read.csv("hotel_bookings.csv")
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job_title <- c("Professional", "Programmer", "Management", "Clerical", "Developer", "Programmer", "Management", "Clerical", "Developer", "Programmer")
employee <- data.frame(id, name, job_title)
print(employee)
seperate(employee, name,into=c('first_name','last_name'), sep=' ')
separate(employee, name,into=c('first_name','last_name'), sep=' ')
separate(employee, name,into=c('first_name','last_name'), sep =' ')
install.packages(tmics)
install.packages("tmics")
library(tmics)
library("tmics")
install.packages("Tmics")
library(Tmics)
install.packages("Tmisc")
library(Tmisc)
library(Tmisc)
data("quartet")
View(quartet)
install.packages("ggplot2")
install.packages("palmerpenguins")
library(ggplot2)
library(palmerpenguins)
ggplot(data = penguins, aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species))+
facet_wrap(~species)
ggplot(data = penguins, aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species))+
facet_wrap(sex~species)
ggplot(data = penguins, aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species))+
facet_wrap(~species)
ggplot(data = penguins, aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species))+
facet_wrap(sex~species)
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plamerpenguins)
ggplot(data = penguins, aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species))+
facet_wrap(sex~species)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y + body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
install.packages("vitae")
library(vitae)
install.packages(tidyverse)
install.package(tidyverse)
install.packages("tidyverse")
library("tidyverse")
chocolate_df <- read_csv("flavors_of_cacao.csv")
chocolate_df <- read_csv("flavors_of_cacao.csv")
colnames(flavors_df)
colnames(chocolate_df)
flavors_df %>%
rename(company...maker.if.known. = Maker)
chocolate_df %>%
rename(company...maker.if.known. = Maker)
chocolate_df %>%
rename(Company...Maker.if.known. = Maker)
view(chocolate_df)
chocolate_df %>%
rename(Company (Maker - if known) = Maker)
chocolate_df %>%
rename(Company...Maker.if.known. = Maker)
select(Rating, Cocoa.Percent, Company.Location)
select(Cocoa.Percent, Company.Location)
trimmed_chocolate_df <- chocolate_df %>%
select(Cocoa.Percent, Company.Location)
library(tidyverse)
library(lubridate)
library(ggplot2)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
library(tidyverse)
library(lubridate)
library(ggplot2)
getwd()
setwd("C:/Users/mczia/OneDrive/Documents/Ziad's Case Study")
# COLLECTING DATA
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
# Compare column names each of the files
colnames(q3_2019)
colnames(q4_2019)
colnames(q2_2019)
colnames(q1_2020)
# We noticed that we have different colnames so we need to match perfectly
# Rename columns  to make them consistent with q1_2020
(q4_2019 <- rename(q4_2019
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(q3_2019 <- rename(q3_2019
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(q2_2019 <- rename(q2_2019
,ride_id = "01 - Rental Details Rental ID"
,rideable_type = "01 - Rental Details Bike ID"
,started_at = "01 - Rental Details Local Start Time"
,ended_at = "01 - Rental Details Local End Time"
,start_station_name = "03 - Rental Start Station Name"
,start_station_id = "03 - Rental Start Station ID"
,end_station_name = "02 - Rental End Station Name"
,end_station_id = "02 - Rental End Station ID"
,member_casual = "User Type"))
# Look for dataframes
str(q1_2020)
str(q4_2019)
str(q3_2019)
str(q2_2019)
# We see that the ride_id & rideable_type are NUM and we need convert them to character
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)
# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
# CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#List of column names
colnames(all_trips)
#How many rows are in data frame?
nrow(all_trips)
#Dimensions of the data frame?
dim(all_trips)
#See the first 6 rows of data frame
head(all_trips)
#See list of columns and data types (numeric, character, etc)
str(all_trips)
#Statistical summary of data. Mainly for numerics
summary(all_trips)
# There are a few problems we will need to fix:
# (1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). We will need to consolidate that from four to two labels.
# (2) The data can only be aggregated at the ride-level, which is too granular. We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.
# (3) We will want to add a calculated field for length of ride since the 2020Q1 data did not have the "tripduration" column. We will add "ride_length" to the entire dataframe for consistency.
# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.
# How many observations fall under each usertype
table(all_trips$member_casual)
# Reassign to the desired values (we will go with the current 2020 labels)
all_trips <-  all_trips %>%
mutate(member_casual = recode(member_casual
,"Subscriber" = "member"
,"Customer" = "casual"))
table(all_trips$member_casual)
# Add columns that list the date, month, day, and year of each ride
all_trips$date <- as.Date(all_trips$started_at)
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
# Add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
# Inspect the structure of the columns
str(all_trips)
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length)
median(all_trips_v2$ride_length)
max(all_trips_v2$ride_length)
min(all_trips_v2$ride_length)
# We can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)
# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# The days of the week are out of order.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# analyze ridership data by type and weekday
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)
#visualize the number of rides by rider type
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")
